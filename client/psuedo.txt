if color goes to green then set the border color to that permanently


now when clicking button: button goes blue. click on different button, that button goes blue and first clicked button goes to default. if buttoncombo is true, ie if the top note and
the bottom number are the same then both buttons get green border. problem is when clicking another button the green buttons are still comparing.

how to fix: if buttons are green do not change color. If isComboCorrect === true


if button.style.borderColor === green do not change the color. like if it has been set to correct then it cannot be changed





game: find parallel minor/major of random key.

random key is displayed on screen. either major or minor. user chooses from a list of all different keys which one is the parallel minor/major

scale game: would display a scale, ex: CDEFGAB and user chooses between 5 (?) different scales which one it is. 



create a database? maybe have user collection, keysignature db? like a keysignature wich looks like 

{
    key: string, 
    notes: string[], 
    minorParallel: string,
    scales: Scale[]
}


{
    ionian: string[]
    dorian: string[]
    phrygian: string[]
    lydian: string[]
    mixolydian: string[]
    aolian: string[]
    locrian: string[]
}

how to get the scales? each scale has a formula. dorian is flat 3rd and flat 7th (if you utgÃ¥r from a major scale) so CDEFGAB would have a function to change it
something like this:

const dorian = () => {
    keySignature.notes // looks something like ["C_1", "D_2", "E_3", "F_4", "G_5", "A_6", "B_7"]
    keySignature.notes[2] + "b"
}

if (newNotes[2].includes("#") || newNotes[6].includes("#")) {
    newNotes[2] = `${this.notes[2].replace("#", "")}`;
    newNotes[6] = `${this.notes[6].replace("#", "")}`;

} else {
    newNotes[2] = `${this.notes[2]}b`;
    newNotes[6] = `${this.notes[6]}b`;
}